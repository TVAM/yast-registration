/**
 * File:        installation/general/inst_suse_register
 * Module:      Installation
 * Summary:     Perform Customer Center Configuration
 *              this includes (by calling suse_register):
 *                              machine registration
 *                              if needed, launch browser for user/customer registration
 *                              ZMD configuration
 * Authors:     J. Daniel Schmidt <jdsn@suse.de>
 *
 * Perform Customer Center Configuration
 *
 * $Id: inst_suse_register.ycp 1 2006-02-17 13:20:02Z jdsn $
 */

{
    textdomain "registration";

    import "FileUtils";
    import "InstURL";
    import "URL";
    import "Wizard";
    import "Popup";
    import "GetInstArgs";
    import "CustomDialogs";
    import "Directory";
    import "Mode";
    import "Stage";
    import "String";
    import "Label";
    import "Internet";
    import "Register";
    import "YSR";
    import "SourceManager";
    import "Package";
    import "PackageCallbacks";
    import "CommandLine";
    import "NetworkService";
    include "registration/texts.ycp";


    // support basic command-line output (bnc#430859)
    list wfm_args = WFM::Args();
    y2milestone ("ARGS: %1", wfm_args);
    if ( (size (wfm_args) > 0)  &&
         (contains (wfm_args, "help") || contains (wfm_args, "longhelp") || contains (wfm_args, "xmlhelp") ) )
    {
        string cmdhelp = _("Registration Module Help");
        Mode::SetUI ("commandline");
        // TRANSLATORS: commandline help
        CommandLine::Run($["id"      : "registration",
                           "help"    : cmdhelp
                        ]);
        y2milestone("Registration was called with help parameter.");
        return `auto;
    }

    // this operation MUST be first and run in any case, even if registration should be skipped (FATE #302966)
    symbol confRegSrv = Register::configureRegistrationServer();
    if (confRegSrv == `conferror  || confRegSrv == `notrust  || confRegSrv == `silentskip)
    {
        y2error("Registration can not be run due to SMT configuration error.");
        return `auto;
    }

    // no network - no suse_register
    // test for existing network connection (bnc#475795)
    if (  Stage::cont()  && ( !Internet::suse_register  ||  !NetworkService::isNetworkRunning()   ) )
    {
        y2error("The internet test failed or no network connection is available. Registration will be skipped.");
        Internet::do_you = false;
        return `auto;
    }

    boolean IAMSLE = ( (integer) SCR::Execute(.target.bash, " [ -e /usr/share/applications/YaST2/customer_center.desktop ] ") == 0 ? true:false );

    // Register::initialize() is mandatory - never remove it
    Register::initialize();

    map ui = UI::GetDisplayInfo();
    boolean textmode = (boolean) ui["TextMode"]:nil;

    /* strings for main (wizard) layout  */

    // Translators: This is title/brand - verify how to translate it correctly
    string title_nccc = _("Novell Customer Center Configuration");

    // Translators: Module Title for the Box
    string title_box  = _("Online Update Configuration");  // (#165509)

    // alternative short title text
    string title_short = _("Registration");
    string title_long = _("Support Registration");

    // select title to use
    // use new default title
    string title = title_short;


    // Translators: limit to 2x 50 charachters - if more needed take 3x 50 chars but NOTHING more
    string nccc_top = _("Get technical support and product updates and
manage subscriptions with Novell Customer Center.");
    // Translators: limit to 2x 50 charachters - if more needed take 3x 50 chars but NOTHING more
    string opensuse_top = _("Get technical support and product updates
by registering this installation.");


    string nccc_heading = "";
    // if we are SLES then switch to NCCC title  (#294454)
    if ( IAMSLE )
    {
        title = title_nccc;
        nccc_heading = nccc_top;
    }
    else
    {
        title = title_short;
        nccc_heading = opensuse_top;
    }


    string nccc_configure   = _("Configure Now (Recommended)");
    string nccc_noconfigure = _("Configure Later");

    string nccc_sub_comment = _("Include for Convenience");
    string nccc_sub_hwinfo  = _("Hardware Profile");
    string nccc_sub_optional= _("Optional Information");
    string nccc_forcereg= _("Registration Code");
    string nccc_sub_showbtn = _("Details...");


    /*  strings for success popup   */
    string nccc_success_msg = _("Your configuration was successful.");
    string nccc_success_server_added = _("An update server has been added to your configuration.");
    nccc_success_server_added = TXT["reposUpdated_old"]:"";
    string nccc_error_no_server_added = _("No update server could be added to your configuration.");
    string nccc_no_source_changes0 = _("No software repository needed to be changed.");
    string nccc_no_source_changes = _("Software repositories did not need to be changed.");
    /* caption for details view  */
    string success_detail_label_old = _("New Update Server");
    string success_detail_label_new = _("Updated software repositories");
    string success_detail_label = success_detail_label_new;

   /* strings for manual interaction popup */
    string mi_required = _("Manual Interaction Required");
    string mi_needinfo = _("Needed Information");
    string mi_browser_btn = _("Continue");
    string mi_start_browser = _("A Web browser will start in which to complete
the configuration on the opened Web site.");


    string title_regularly_run = _("Regularly Synchronize with the Customer Center");

    /* string for show information popup */
    string transmit_info = _("Registration and Privacy Information");

    /*  strings for conflict popup */
    string conflict_need_info = _("The server requires additional system information. Activating 
submission of the hardware profile automatically.");

     /*  nonroot-message strings */
     string nonroot_title = _("Update Source Issues");
     string nonroot_message = _("Registering as a regular user does not include the update source
in the Online Update YaST module. If you continue and later want 
to update with Online Update, the source must be added manually.
Other tools, such as Software Updater in the panel, can still be 
used. Alternatively, cancel then register through YaST as root 
so the sources are available to all tools.");



    /* error messages  */
    string data_invalid = _("Error: Data received is invalid.");
    string retrieve_error = _("Error: Could not retrieve data.");
    string no_browser_msg = _("No Web browser available.
Run the suse_register command manually.");
    string no_product_msg = _("No product found to be registered.
You do not need to register this installation.
Please add update sources yourself.");
    string no_w3m_msg = _("Your registration requires interactive input that is not
supported in text mode. Run YaST2 in the graphical mode or
run the suse_register command manually.");

    /* help text for dialog "Novell Customer Center Configuration" */
string help_title = sformat( "<p><b>%1</b></p>", title);
string help_para1 = _("<p>
Configure your system to enable online updates by registering it with Novell.
To do this now, select <b>Configure Now</b>. Delay the registration with
<b>Configure Later</b>.
</p>");

string help_para2 = _("<p>
To simplify the registration process, include information from your system
with <b>Optional Information</b> and <b>Hardware Profile</b>. 
<b>Details</b> shows the maximum amount of information that can be involved
 in your registration. To obtain this information, it contacts the Novell
server to query what information is needed for your product. Only the identity
of the installed product is sent in this initial exchange.
</p>");

string help_para3 = _("<p>
If you purchased your copy of this product, enable <b>Registration Code</b>
so you are prompted for your product code. 
This registers you for the installation support included with your product.
</p>");

string help_para4 = _("<p>
No information is passed to anyone outside Novell. The data is used for
statistical purposes and to enhance your convenience regarding driver support
and your Web account. Find a detailed privacy policy in <b>Details</b>. View
the transmitted information in the log file <tt>~/.suse_register.log</tt>.
</p>");

string help_para5 = _("<p>
<b>Regularly Synchronize with the Customer Center</b> checks that your update 
sources are still valid and adds any new ones that may be available.
It additionally sends any modifications to your included data to Novell, such 
as hardware information if <b>Hardware Information</b> is activated.
This option does not remove any sources added manually.
</p>");

string help_para6 = _("<p>
The registration process will contact a Novell server (or a local registration server if your company provides one).
Please make sure that the network and proxy settings are correct.
You can step back to the network setup to check or change the settings.
</p>");

string help = help_title + help_para1 + help_para2 + (Register::display_forcereg ? help_para3:"") + help_para4;

if (! Mode::normal()) help = help + help_para6;

help = help + HELP["localRegistrationChapter1"]:"" + HELP["localRegistrationChapter2"]:"";

    /*  further strings   */
    string checking         = _("Checking...");
    string error            = _("Error");
    string server_error     = _("An error occurred while connecting to the server.");
    string details          = _("Details...");
    string error_msg        = _("Error");
    string starting_browser = _("Starting browser...");
    string error_target_init_failed = _("Initialization failed.\nCan not interact with the package system.");
    // FIXME LATER (in order to not break the translations now): registrer -> register (bnc#703222)
    string message_install_missing_packages = _("In order to registrer properly the system
needs to install the following packages.");

    /* other string variables */
    string information_text = "";
    string error_msg_details = "";

    // default is true, see statement in layout term
    boolean configure_status = true;



    /* --   MAIN (WIZARD) LAYOUT  --  */
    term sr_layout=nil;

    list<term> expertMenu = [ `item(`id(`localRegistrationServer), TXT["localRegistrationServer"]:"" )
                            ];


    sr_layout = `HVSquash(
    `VBox(
        `Label( nccc_heading ),
        `VSpacing(0.5),
        `Frame( title,
            `RadioButtonGroup( `id(`sr_perform),
            `MarginBox( 2, 0.5,
            `VBox(
                `Left ( `RadioButton(`id(`noconfigure), `opt(`notify), nccc_noconfigure )),
                `Left ( `RadioButton(`id(`configure),   `opt(`notify), nccc_configure, true )),
                `Left ( `id(`includeinfo),
                `HBox( `HSpacing( 3.0 ),
                       `VBox (
                           `VSpacing(0.5),
                           `Left( `Label( nccc_sub_comment ) ),
                           `Left( `CheckBox(`id(`hwinfo),  `opt(`notify), nccc_sub_hwinfo,  Register::submit_hwdata ) ),
                           `Left( `CheckBox(`id(`optional), `opt(`notify), nccc_sub_optional, Register::submit_optional ) ),
                            Register::display_forcereg ? `Left( `CheckBox(`id(`forcereg), `opt(`notify), nccc_forcereg, false ) ):`Empty(),
                           `VSpacing(0.5),
                            // active in SLE products only
                            IAMSLE ? `Left( `CheckBox(`id(`regularly_run), `opt(`notify), title_regularly_run, Register::register_regularly ) ):`Empty(),
                           `Right(
                                   `HBox( `PushButton(`id(`showinfo), nccc_sub_showbtn ),
                                           IAMSLE ? `MenuButton( _("Advanced"), expertMenu ):`Empty()
                                   )
                           )
                        )
                    )
                )
            ))
        ))
    ));


    term contents = `VBox ( `VSpacing (0.5), sr_layout, `VSpacing (0.5));




    /* --      SHOW INFO POPUP     --  */
    term showinformation = `HBox( `HSpacing(0.5),
                                  `MinSize(  75, 22 ,`VBox(
                                     `Label( transmit_info ),
                                     `RichText(`id(`information_text), information_text ),
                                     `PushButton (`id (`info_close), Label::CloseButton () )  )
                                   ),
                                  `HSpacing(0.5)
    );






    /* --  MANUAL INTERACTION POPUP  --  */
    term manual_interaction = //`HBox(
                                   `MinSize( 70, 25, `HBox( `VBox(
                                           `Left( `Label( `opt(`boldFont), mi_required ) )  ,
                                           `VSpacing(0.5) ,
                                           `Left( `Label( mi_start_browser  ) ) ,
                                           `Left( `Label( mi_needinfo ) )  ,
                                                  `RichText(`id(`needinfo), ""  ),
                                           `HBox(
                                                  `PushButton(`id(`start_browser), mi_browser_btn )  ,
                                                  `HSpacing( 3),
                                                  `PushButton(`id(`cancel),  Label::CancelButton()  )
                                           )
                                   ))
    );




    /* --      CCC CONFLICT POPUP      --  */
    term ccc_conflict=
    `VBox(
          `Left( `Label( `opt(`boldFont), title ) ),
          `VSpacing( 0.5 ),
          `Left( `Label( conflict_need_info ) ),
          `PushButton(`id(`ok), Label::OKButton())
    );



    /* --      CCC ERROR POPUP      --  */
    term error_message=
    `VBox(
           `Left( `Label( `opt(`boldFont), error ) ),
           `VSpacing( 0.5 ),
           `Left( `Label( `id(`err_description), server_error ) ),
           `HBox(
                  `HWeight(1, `PushButton(`id(`back), Label::BackButton()  ) ),
                  `HSpacing( 3 ),
                   // reactivated skipping the registration (#240174)
                  `HWeight(1, `PushButton(`id(`skip), Label::SkipButton()  ) ),
                  `HSpacing( 3 ),
                  `HWeight(1, `PushButton(`id(`err_detail), details ) )
                )
    );



    /* --      CCC ERROR POPUP      --  */
    term error_message_details=
    `MinSize( 60, 20,  `VBox(
           `Left( `Label( `opt(`boldFont), error_msg ) ),
           `VSpacing( 0.5 ),
           `RichText(`id(`errordetail), "" ),
           `PushButton(`id(`ok), Label::OKButton())
    ));



    /* --      CCC ERROR POPUP PLAINTEXT     --  */
    term error_message_details_pt=
    `MinSize( 60, 20,  `VBox(
           `Left( `Label( `opt(`boldFont), error_msg ) ),
           `VSpacing( 0.5 ),
           `RichText(`id(`errordetail), `opt(`plainText), "" ),
           `PushButton(`id(`ok), Label::OKButton())
    ));




    /* --       SUCCESS MESSAGE    --  */
    term nccc_success=
    `VBox(
           `Left( `Label( `opt(`boldFont), title ) ),
           `VSpacing( 0.5 ),
           `Left( `Label( nccc_success_msg ) ),
           `Left( `Label( nccc_success_server_added ) ),
           `HBox(
                  `HWeight(1, `PushButton(`id(`ok), Label::OKButton()  ) ),
                  `HSpacing( 3 ),
                  `HWeight(1, `PushButton(`id(`success_detail), details ) )
           )
    );




    /* --    SUCCESS DETAILS     --  */
    term nccc_success_detail=
    `MinSize( 60, 7,  `VBox(
           `Left( `Label( `opt(`boldFont), success_detail_label ) ),
           `VSpacing( 0.5 ),
           `RichText(`id(`success_detail_richtext), `opt(`plainText) , "" ),
           `PushButton(`id(`ok), Label::OKButton())
    ));



/* ---------------------------------- LOCAL FUNCTIONS ------------------------------------------------------------  */


boolean report_error()
{
    // function to display an error message
    // and offer a detailled view of the error message

    y2error("Registration is reporting an error to the user: %1", error_msg_details);

    UI::OpenDialog(error_message);
    UI::SetFocus (`id (`skip ));
    symbol retry = nil;

    repeat
    {
        retry = (symbol) UI::UserInput();

        if ( retry == `skip ) configure_status = false;
        else if (retry == `err_detail)
        {
            // switch to plaintext if error output is one or two lines (#239570)
            if ( contains( [0,1], size(splitstring(error_msg_details,"\n")) ) )
               UI::OpenDialog(error_message_details);
            else
               UI::OpenDialog(error_message_details_pt);
            UI::ChangeWidget( `id(`errordetail), `Value, error_msg_details);
            UI::UserInput();
            UI::CloseDialog();
        }
    } until ( contains([`skip, `back, `abort, `cancel], retry) );

    UI::CloseDialog();
    return true;
}


string su_exec(string user, string group, string command)
{   // (#167255)
    // introduce cleanup function to also cleanup the xauth entry (bnc#702638)
    string exec = sformat("
#!/bin/bash -x

user=%1
group=%2
cmd=\"%3\"

fakehome=/var/lib/YaST2/$user-fakehome
umask 0077

XA=/root/.xauth
mkdir -p $XA
DELETEXAEXPORT=no
[ ! -e $XA/export ] && DELETEXAEXPORT=yes
grep ^$user$ $XA/export >/dev/null 2>&1  || echo $user >> $XA/export

mkdir -p $fakehome
chmod 700 $fakehome
tmp=$(mktemp $fakehome/.Xauthority.XXXXXX) || exit 1
chmod 600 $tmp
chown $user:$group $tmp $fakehome


function cleanup
{
  if [ \"x$DELETEXAEXPORT\" = \"xyes\" ]
  then
    rm -f $XA/export
  else
    sed -i --follow-symlinks \"/^$user$/d\" $XA/export
  fi
  
  rm -rf $fakehome
}


trap \"cleanup\" EXIT INT HUP TERM

", user, group, command );


    // screen jail can be removed - no longer used (#367719)
    // create a script to run a system call as different user
    // thanks to werner (script)
    // unset DESKTOP_SESSION : (#207332)
    if (!textmode)
    {    exec = exec +
"
if test \"${DISPLAY%:*}\" = \"localhost\" ; then
    disp=$(hostname -s)/unix:${DISPLAY#*:}
else
    disp=\"${DISPLAY}\"
fi

unset DESKTOP_SESSION

: ${XAUTHORITY:=$HOME/.Xauthority}
if test ! -e $XAUTHORITY ; then
    su -s /bin/bash -- $user -c \"cd; $cmd\"
    exit 0
fi
exec 4< ${XAUTHORITY}
su -s /bin/bash -- $user -c \"xauth -qif <(cat 0<&4) extract - $disp | xauth -qf $tmp merge -\"
exec 4<&-

su -s /bin/bash -- $user -c \"cd; XAUTHORITY=$tmp $cmd\"

exit 0";
    }
    else
    {
        // screen jail can be removed - no longer used (#367719)
        exec = exec + "su -s /bin/bash -- $user -c \"cd; $cmd\"";
    }

    y2milestone("using su_exec to launch browser");

    return exec;
}



string browser_command(string url)
{
    // create the command string to launch a browser
    string bcmd="/bin/false";
    boolean cmd_ok = false;
    string required_package = "";
    string checkBinary = "";

    if ( textmode )
    {
        bcmd = " w3m ";
        required_package = "w3m";
        checkBinary = "/usr/bin/w3m";
    }
    else
    {
        bcmd = " MOZ_DISABLE_PANGO=1 /usr/bin/xulrunner /usr/share/YaST2/yastbrowser/application.ini -url ";
        required_package = "mozilla-xulrunner190";
        checkBinary = "/usr/bin/xulrunner";
    }

    // (bnc#443781)
    cmd_ok = (integer) SCR::Execute(.target.bash, sformat("test -x %1", checkBinary)) == 0 ? true:false;
    if ( ! cmd_ok )
    {
        if (!Package::Installed(required_package))
        {
            Package::InstallAllMsg([required_package], nil);
        }
        cmd_ok = (integer) SCR::Execute(.target.bash, sformat("test -x %1", checkBinary)) == 0 ? true:false;
    }

    if ( ! cmd_ok )
    {
        y2error("No browser found for interactive registration. A needed package was not installed: %1", required_package);
        return "nobrowser";
    }
    else
    {
        y2milestone("A browser was found to show the interactive registration: %1", required_package);
    }


    // add url to browser command
    bcmd =  bcmd + "'" + url + "'";

    if (Register::use_proxy)
    {
        // (#165891) - (#208651) fixed in Register.ycp
        bcmd = " http_proxy='"  + Register::http_proxy  + "' " + bcmd;
        bcmd = " https_proxy='" + Register::https_proxy + "' " + bcmd;
    }

    // add su call to not run a browser as root during installation
    bcmd = su_exec("suse-ncc", "suse-ncc", bcmd );

    return bcmd;
}


boolean launchBrowser(string url)
{
    boolean retval=false;
    y2milestone("Just about to start a browser for manual interaction in registration.");
    // check for valid url
    map parsed = URL::Parse(url);
    if ( parsed == $[])
    {
        y2error("The URL to open in the registration browser has an invalid format: %1", parsed);
        return false;
    }
    // no rebuild of the url - parser seems to only parse one parameter in URL

    string uri = String::FirstChunk(url, "\n");  // (#167225)
    // get command to run correct browser and execute it
    string command = browser_command(uri);
    if (command == "nobrowser")
    {
        y2error("Could not find a browser to display the registration website.");
        return false;
    }


    if (textmode)
    {
        y2milestone("Launching textmode browser with: %1", command);
        retval = ( (integer)UI::RunInTerminal(command) == 0 ) ? true:false;
    }
    else
    {
        y2milestone("Launching graphical borwser with: %1", command);
        retval = ( (integer)SCR::Execute(.target.bash, command ) == 0 ) ? true:false;
    }

    y2milestone("The registration browser returned with error code: %1", retval);

    UI::RedrawScreen();
    return retval;
}



boolean registrationServerSettings()
{
    y2milestone("Asking the user for custom registration server settings.");
    string curRegURL  = Register::smt_server;
    if (curRegURL  == nil) curRegURL = "https://";
    string curRegCert = Register::smt_server_cert;
    if (curRegCert == nil) curRegCert = "";

    term askForRegSettings = `VBox(
        `VSpacing(0.5),
        `Label( TXT["localRegistrationServer"]:"" ),
        `VSpacing(1.5),
        `InputField(`id(`newRegistrationServer),     TXT["registrationServer"]:"", curRegURL  ),
        `VSpacing(0.5),
        `InputField(`id(`newRegistrationServerCert), TXT["serverCACertificateLocation"]:"", curRegCert ),
        `VSpacing(1),
        `HBox(
            `PushButton(`id(`okButton), Label::OKButton() ),
            `PushButton(`id(`cancel), Label::CancelButton() )
        )

    );

    UI::OpenDialog(askForRegSettings);

    any ret = nil;
    boolean status=false;

    while (true)
    {
        ret = UI::UserInput();

        if      (ret == `cancel || ret == `abort)
        {
            status=false;
            break;
        }
        else if (ret ==  `okButton)
        {
            curRegURL  = (string) UI::QueryWidget(`id(`newRegistrationServer),     `Value);
            curRegCert = (string) UI::QueryWidget(`id(`newRegistrationServerCert), `Value);

            // check urls for sanity
            map parsed = URL::Parse(curRegURL);
            if (parsed == nil || parsed == $[] || parsed["scheme"]:"" != "https" )
            {
                y2error("The selected registration URL has an invalid format: %1", parsed);
                Popup::Message(TXT["urlHasToBeHttps"]:"");
                continue;
            }
            else
            {
                Register::smt_server = curRegURL;
                Register::smt_server_cert = curRegCert;
                y2milestone("New registration server: %1", curRegURL);
                y2milestone("New registration server CA certificate location: %1", curRegCert);
                status=true;
                break;
            }
        }
    }

    UI::CloseDialog();
    return status;
}



/* ----------------------------------- END FUNCTIONS -------------------------------------------------------------  */


    // check if we are in installation workflow or running independently
    if (Mode::normal()) Wizard::CreateDialog();

    boolean enable_back = GetInstArgs::enable_back();
    // we always need the next button
    Wizard::SetContents (title, contents, help, enable_back, true);
    Wizard::SetTitleIcon ("yast-product-registration");  // (#211552)

    //y2debug ("%1", UI::DumpWidgetTree());


    if ( !Register::iamroot )
    {    // do not run as non-root: #170736
        return `auto;
    }


    boolean loopend = false;
    any ret = nil;
    integer SRstatus = nil;
    string manual_interaction_overview = "";
    symbol xenType = nil;

/* -------------------------------- PROGRAM LOGIC START ----------------------------------------------------------- */

    // #170113, the lock is needed around everything that may end up in ZMD
//    SourceManager::Lock ();

    repeat {
        ret = Wizard::UserInput();

        if (ret == `abort)
        {
            if (Mode::normal()) break;
            if (Popup::ConfirmAbort (`incomplete))  break;
        }
        else if (ret == `help)
        {
            Wizard::ShowHelp (help);
        }
        else if (ret == `configure || ret == `noconfigure)
        {
            configure_status = (boolean) UI::QueryWidget(`id(`configure),  `Value);
        }
        else if (ret == `hwinfo || ret == `optional || ret == `forcereg || ret == `regularly_run )
        {
            Register::submit_hwdata  = (boolean) UI::QueryWidget(`id(`hwinfo),  `Value);
            Register::submit_optional= (boolean) UI::QueryWidget(`id(`optional), `Value);
            Register::force_registration = (boolean) UI::QueryWidget(`id(`forcereg), `Value);
            if ( IAMSLE )
                Register::register_regularly = (boolean) UI::QueryWidget(`id(`regularly_run), `Value);
        }
        else if (ret == `localRegistrationServer)
        {
            if (registrationServerSettings() )
            {   // overwrite smt settings if it returns true
                Register::force_new_reg_url = true;
                if ( Register::setupRegistrationServer(nil) != `ok )
                {
                    configure_status = false;
                }
                Register::force_new_reg_url = false;
            }

        }
        else if (ret == `showinfo)
        {
            information_text = Register::suseRegisterListParams();

            if ( information_text != "" )
            {
                UI::OpenDialog( showinformation );
                UI::ChangeWidget(`id(`information_text), `Value, information_text );
                any info_ret = nil;

                repeat
                {
                    info_ret = UI::UserInput();
                    if ( is(info_ret, string) ) launchBrowser( (string) info_ret);

                } until ( info_ret == `info_close  ||  info_ret == `cancel );

                UI::CloseDialog();
            }

            else
            {
                error_msg_details = YSR::get_errormsg();
                report_error();
                error_msg_details = "";
            }

        }
        else if (ret == `next)
        {
            if ( configure_status == true )
            {
                if ( IAMSLE && xenType == nil )
                {
                    // once checking for XEN    (bnc#418287)
                    xenType = Register::xenType();

                    if ( xenType == `xen0 )
                    {
                        string installPackage = "xen-tools";
                        if ( ! Package::Installed(installPackage))
                        {
                            y2milestone("Xen dom0 detected. Asking the user if the following packages should be installed: %1", installPackage);
                            Package::InstallMsg(installPackage, _("Xen Dom0 detected. The following package needs to be installed."));
                        }
                        else
                        {
                            y2milestone("All needed packages are already installed: %1", installPackage);
                        }
                    }
                    else if ( xenType == `xenU )
                    {
                        string installPackage = "xen-tools-domU";
                        string removePackage  = "xen-tools";

                        string xenDomU    = _("Xen DomU detected.");
                        string installMsg = xenDomU + "<br>" + _("The following package needs to be installed.") +
                                                "<br>" + sformat("%1", installPackage);  //  (bnc#444638)
                        string removeMsg  = xenDomU + "<br>" +
                           sformat(_("To count this installation correctly the package %1 needs to be installed."), installPackage ) +
                           "<br>" + _("Therefore the following package needs to be removed first.") + 
                           "<br>" + sformat("%1", removePackage);   //  (bnc#444638)


                        Package::RemoveMsg(removePackage, removeMsg);

                        if ( ! Package::Installed(removePackage) )
                        {
                            if ( Package::InstallMsg(installPackage, installMsg ) )
                            {    y2milestone("Sucessfully installed: %1", installPackage); }
                            else
                            {    y2error("Could not install: %1", installPackage); }
                        }
                        else
                        {
                            y2error("In a Xen DomU package %1 is installed rather than %2. Registration will continue nevertheless.", removePackage, installPackage);
                            Popup::Notify( xenDomU + "\n" +
                                sformat(_("The package %1 should have been installed and %2 removed."), installPackage, removePackage ) +
                                "\n" +  _("Registration will continue now although the registration server may miscount this installation.")
                            );
                        }
                    }
                    else if ( xenType == nil )
                    {
                        y2error("Detecting XEN failed. Assuming XEN is disabled. Maybe the registration will not count this machine correctly.");
                        xenType = `unknown;
                    }
                }

                // call suseRegister
                SRstatus = Register::suseRegister(nil);

                // error code 4: needinfo - manual interaction
                if ( SRstatus == 4 )
                {
                    // get the details overview
                    manual_interaction_overview = YSR::get_registerReadableText();   // (bnc#435869)
                    if ( manual_interaction_overview == nil )   manual_interaction_overview = "";

                    UI::OpenDialog( manual_interaction );
                    UI::SetFocus (`id (`start_browser ));
                    UI::ChangeWidget( `id(`needinfo), `Value, manual_interaction_overview );
                    any mi_ret =nil;
                    boolean mi_loopend = false;
                    boolean recheck = true;
                    boolean browserrun = true;

                    repeat
                    {
                        recheck = true;
                        mi_ret = UI::UserInput();
                        if ( mi_ret == `start_browser  )
                        {
                            // now we launch the browser
                            UI::ChangeWidget( `id(`needinfo), `Value, starting_browser );
                            string browserURL = YSR::get_manualURL();
                            browserrun = launchBrowser( browserURL );
                            // deactivate force_registration after each suse_register call (#bugNo.)
                            Register::force_registration = false;
                        }
                        else if ( mi_ret == `cancel  )
                        {
                            recheck = false;
                            mi_loopend = true;
                        }
                        else if ( is(mi_ret, string) )
                        {
                            // launch browser
                            browserrun = launchBrowser( (string) mi_ret);
                            recheck = false;
                        }


                        if ( recheck  && browserrun )
                        {
                            // show the user, that we are doing something
                            UI::ChangeWidget( `id(`needinfo), `Value, checking );

                            SRstatus = Register::suseRegister(nil);

                            if ( SRstatus == 0  ||  SRstatus == 3 )
                            {
                                // error 0: everything is done, quit
                                // error 3: madatory data conflict - handle outside of manual interaction
                                mi_loopend = true;
                            }
                            else if ( SRstatus == 4 )
                            {
                                // still needinfo, change displayed information and stay in manual interaction
                                manual_interaction_overview = YSR::get_registerReadableText();   // (bnc#435869)
                                UI::ChangeWidget( `id(`needinfo), `Value, manual_interaction_overview );
                            }
                            else
                            {
                                // unknown error, let the user find an exit :)
                                mi_loopend = true;
                            }
                        }


                        if (! browserrun )
                        {
                            y2error("Registration can not finish with manual interaction because no webbrowser was found.");
                            Popup::Message(no_browser_msg);
                            mi_loopend = true;
                        }

                    } until ( mi_loopend );

                    // we are done with manual interaction
                    UI::CloseDialog();

                    if (mi_ret == `cancel) configure_status = false;
                }



                // no NO MORE suse_register calls below this line !!
                // ---------------------------------------------------------------------------------


                /*  handle error codes from FIRST suse_register call AND from manual interaction  */
                if ( SRstatus == 3)
                {
                    // error code 3 means:
                    // conflict between transmitted data and data to be transmit according to customer contract
                    // hwconfig is needed
                    UI::OpenDialog(ccc_conflict);
                    UI::SetFocus (`id (`ok));
                    UI::UserInput();
                    UI::CloseDialog();
                    Register::submit_hwdata = true;
                }


                // error code 0 means: everything is OK
                if ( SRstatus == 0 )
                {
                    // get the taskList
                    map<string, any> taskList = YSR::getTaskList();
                    list<string> repoSummary = [];

                    if ( taskList != $[] )
                    {
                        string oldMessage = _("Setting up online update source...");
                        string newMessage = _("Updating software repositories...");
                        UI::OpenDialog(`VBox(`Label( newMessage )));

                        // add/delete/change repositories
                        repoSummary = Register::updateSoftwareRepositories(taskList, true);

                        // #186978  -  hide the passwords of the urls in the status window
                        // now obsolete - the summary created by "updateSoftwareRepositories" will not contain passwords of URLs

                        UI::CloseDialog();

                        // and then show success message
                        symbol sret=nil;

                        // (#261239) show success popup only on success else error message
                        if (repoSummary != nil && size(repoSummary) != 0)
                        {
                            UI::OpenDialog( nccc_success );
                            repeat
                            {
                                sret = (symbol) UI::UserInput();
                                if (sret == `success_detail)
                                {
                                    string text = mergestring (repoSummary, "\n");
                                    // Show the URLs that were added as update sources.
                                    // Not STDERR of suse_register output, we may have
                                    // declined some unsigned ones, #180820#c26.
                                    UI::OpenDialog( nccc_success_detail );
                                    UI::SetFocus(`id(`ok));
                                    UI::ChangeWidget(`id(`success_detail_richtext), `Value, text );
                                    UI::UserInput();
                                    UI::CloseDialog();
                                }
                            } until (sret == `ok );
                            UI::CloseDialog();
                        }
                        else
                        {
                            //Popup::Error(nccc_error_no_server_added);
                            Popup::Notify(nccc_no_source_changes);
                        }
                    }

                    // we are done - finally
                    loopend = true;
                }



                //  show a message when there are no products to register
                if ( SRstatus == 100  || SRstatus == 101 )
                {
                    Popup::Message(no_product_msg);
                    y2error("No products to be registered. SuseRegister returned with exit code: %1", SRstatus);
                    loopend = true;
                }


                // error handling - no browser available for interactive mode
                if ( SRstatus == 198 )
                {
                    Popup::Message(no_browser_msg);
                    y2error("No browser found to display registration website. SuseRegister returned with exit code: %1", SRstatus);
                    loopend = true;
                }


                // error handling - initialization of target failed
                if ( SRstatus == 113 )
                {
                    Popup::Message(error_target_init_failed);
                    y2error("Initialization of target failed.");
                    loopend = true;
                }


                // handle any other error codes
                if ( contains([0, 1, 3, 4, 100, 101, 113, 198, 199], SRstatus)  == false )
                {
                    y2error("An error occurred. SuseRegister exit code (or internal error status) is: %1", SRstatus);
                    // display error message
                    error_msg_details = YSR::get_errormsg();
                    report_error();
                    error_msg_details = "";
                }

/*
                DOCUMENTATION OF ERROR CODES
                exit codes of suseRegister:
                * 0:   everything ok - we are done
                * 1:   needinfo auto - internal status, should create a loop until it is != 1
                * 2:   error
                * 3:   conflict - data sent is in conflict with the data needed according to contract
                * 4:   needinfo browser - manual interaction is required
                * 100: no product found that can be registered
                * 101: no product found that can be registered

                internal codes:
                # relating to the registration process
                * 111: a generic unknown error uccurred during a SuseRegister call
                * 112: the initialization of SuseRegister failed; no special message is used for that though
                * 113: the initialization if the target failed - no interaction with the package system possible

                # generic errors/failures
                * 198: the system did not find any browser to let the user perform the manual interaction part of the registration
                * 199: failed to start Source Manager
*/

            }
            else
            {
                // skipping - no online update!!
                loopend = true;
                ret = `skip;
            }
        }

        // update main widget settings - they may have changed
        if (configure_status) UI::ChangeWidget(`id(`configure), `Value, true);
        else UI::ChangeWidget(`id(`noconfigure), `Value, true);

        // gray out if later is selected (#178042)
        UI::ChangeWidget(`id(`includeinfo), `Enabled, configure_status );

        UI::ChangeWidget(`id(`hwinfo), `Value, Register::submit_hwdata);
        // (#165841)
        if (Register::display_forcereg) UI::ChangeWidget( `id(`forcereg ), `Value, Register::force_registration );

    } until ( loopend || ret == `back );



    if (Mode::normal())
    {
        Wizard::CloseDialog();
    }
    else
    {
        if (ret == `skip)
        {
            // skipping suse register - no online update
            Internet::do_you = false;
            // disable regular registrations when registration was skipped initially (#366687)
            Register::register_regularly = false;
            ret = `next;
        }
        else
        {
            // ok we can do online update
            Internet::do_you = true;
        }
    }

    // always return a proper return value
    if (! contains([`next, `abort, `back], (symbol)ret ))
    { ret = `next; }

    // Register::finish mandatory as well - do not remove (#366687)
    Register::finish();

    return (symbol)ret;
}
