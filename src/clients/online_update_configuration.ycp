/**
 * File:        online_update_configuration
 * Module:      Registration
 * Summary:     Configure Online Update
 * Authors:     J. Daniel Schmidt <jdsn@suse.de>
 *
 * Configure Online Update Settings
 *
 * $Id: online_update_configuration.ycp 1 2008-09-10 13:20:02Z jdsn $
 */

{
    textdomain "registration";

    import "OnlineUpdateConfiguration";
    import "Wizard";
    import "Popup";
    import "Label";
    import "URL";
    import "Mode";
    import "SourceManager";
    import "PackageCallbacks";
    import "CommandLine";

    include "registration/OUCDialogs.ycp";
    include "registration/texts.ycp";

    // support basic command-line output (bnc#439050)
    list wfm_args = WFM::Args();
    y2milestone ("ARGS: %1", wfm_args);
    if ( (size (wfm_args) > 0)  &&
         (contains (wfm_args, "help") || contains (wfm_args, "longhelp") || contains (wfm_args, "xmlhelp") ) )
    {
        string cmdhelp = _("Online Update Configuration Module Help");
        Mode::SetUI ("commandline");
        // TRANSLATORS: commandline help
        CommandLine::Run($["id"      : "online_update_configuration",
                           "help"    : cmdhelp
                        ]);
        y2milestone("Online Update Configuration was called with help parameter.");
        return `auto;
    }

    map ui = UI::GetDisplayInfo();
    boolean textmode = (boolean) ui["TextMode"]:false;

    string help = getOUCHelp(`default);
    term contents = getOUCDialog(`default);

/* ---------------------------------------------------------------------------------------------------------------  */

    // check if we are in installation workflow or running independently
    if (Mode::normal()) Wizard::CreateDialog();

    // we always need the next button and never the back button
    Wizard::SetContents (moduleTitle, contents, help, false, true);
    Wizard::SetTitleIcon ("yast-online_update");
    Wizard::SetNextButton(`next, Label::FinishButton() );

/* -------------------------------- PROGRAM LOGIC START ----------------------------------------------------------- */

    OnlineUpdateConfiguration::Read();

    if (false) // for testing only
    {
        OnlineUpdateConfiguration::currentUpdateRepo = "";
    }

    string replaceUpdateRepoString = OnlineUpdateConfiguration::currentUpdateRepo;

    if ( OnlineUpdateConfiguration::currentUpdateRepo == OnlineUpdateConfiguration::defaultUpdateRepo  &&
         OnlineUpdateConfiguration::currentUpdateRepo != ""                                                )
    {// in this case - we have default update repo installed
        replaceUpdateRepoString = OnlineUpdateConfiguration::currentUpdateRepo + "   " + defaultMark;
        UI::ChangeWidget(`id(`restoreDefault), `Enabled, false);
    }
    else
    { // in this case - custom or no update repo
        if ( replaceUpdateRepoString == ""  ) replaceUpdateRepoString = noRepo;
        UI::ChangeWidget(`id(`restoreDefault), `Enabled, true);
    }

    // write data to the UI
    UI::ChangeWidget(`id(`currentRepoURL),         `Value, replaceUpdateRepoString);
    UI::ChangeWidget(`id(`automaticOnlineUpdate),  `Value, OnlineUpdateConfiguration::enableAOU);
    UI::ChangeWidget(`id(`updateInterval),         `Value, OnlineUpdateConfiguration::updateInterval);
    UI::ChangeWidget(`id(`skipInteractivePatches), `Value, OnlineUpdateConfiguration::skipInteractivePatches);


    UI::RecalcLayout();
    //UI::RedrawScreen();

    any ret=`auto;

    repeat
    {
        ret = Wizard::UserInput();

        if (ret == `next)
        {
            OnlineUpdateConfiguration::updateInterval         = (symbol)  UI::QueryWidget(`id(`updateInterval),         `Value );
            OnlineUpdateConfiguration::skipInteractivePatches = (boolean) UI::QueryWidget(`id(`skipInteractivePatches), `Value );
            OnlineUpdateConfiguration::enableAOU              = (boolean) UI::QueryWidget(`id(`automaticOnlineUpdate),  `Value );

            y2milestone("Writing online update configuration settings.");
            OnlineUpdateConfiguration::Write();
            //break;
        }

        if ( ret == `restoreDefault )
        {
            if ( OnlineUpdateConfiguration::defaultUpdateRepo == nil  ||
                 OnlineUpdateConfiguration::defaultUpdateRepo == ""      )
            {
                y2milestone("No default update repo could be found in the products metadata.");

                if ( OnlineUpdateConfiguration::defaultRegistrationURL == nil ||
                     OnlineUpdateConfiguration::defaultRegistrationURL == ""    )
                {
                    y2error("No registration server set in product metadata. No update server can be setup automatically.");
                }
                else
                {
                    y2milestone("Registration is needed to get an update source.");

                    if ( Popup::YesNo( TXT["needToRegister"]:"" + "\n\n" + TXT["runRegistrationNow"]:"" ) )
                    {
                        y2milestone("User wants to run the registration in order to setup the default update repository.");
                        // trigger registration
                        ret = `register;
                    }
                    else
                    {
                        y2milestone("User selected not to run the registration in order to setup the default update repository.");
                    }
                }

            }
            else
            {
                y2milestone("User selected to set the default update repository: %1", OnlineUpdateConfiguration::defaultUpdateRepo);
                OnlineUpdateConfiguration::setUpdateRepo(OnlineUpdateConfiguration::defaultUpdateRepo);
            }
        }

        if (ret == `repoManager)
        {
            if ( textmode )
                WFM::call("inst_source");
            else
                SCR::Execute(.background.run_output, "yast2 inst_source");
        }

        if (ret == `smolt)
        {
            if ( textmode )
                WFM::call("system-profile");
            else
                SCR::Execute(.background.run_output, "yast2 system-profile");
        }

        if (ret == `register)
        {
            if ( textmode )
                WFM::call("inst_suse_register");
            else
                SCR::Execute(.background.run_output, "yast2 inst_suse_register");
        }


        // update values in UI
        // after a registration call refetch the current update repo url
        if ( ret == `restoreDefault || ret == `register )
        {
            y2milestone("Refetching current updateRepoURL.");
            replaceUpdateRepoString = OnlineUpdateConfiguration::fetchCurrentUpdateRepoURL();
            y2milestone("Current updateRepoURL is: %1", replaceUpdateRepoString);
            UI::ChangeWidget(`id(`currentRepoURL), `Value,  replaceUpdateRepoString);
            UI::RecalcLayout();
        }


    } until (ret == `next || ret == `abort || ret == `cacel || ret == `back);

    if (! is(ret, symbol))  ret = `next;

    Wizard::CloseDialog();
    return (symbol)ret;

}
