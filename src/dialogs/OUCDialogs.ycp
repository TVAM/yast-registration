/**
 * File:        OUCDialogs.ycp
 * Module:      Registration
 * Summary:     Configure Online Update
 * Authors:     J. Daniel Schmidt <jdsn@suse.de>
 *
 * Configure Online Update Configuration Dialogs
 *
 * $Id: OUCDialogs.ycp 1 2008-09-10 13:20:02Z jdsn $
 */

{

textdomain "registration";

import "OnlineUpdateConfiguration";

// module title
string moduleTitle = _("Online Update Configuration");
// translators: (default), meaning: "Current Update Repository: http://xyz/  (default)"
string defaultMark  = _("(default)");
// translators: (none), meaning "Current Update Repository: (none)"
string noRepo = _("(none)");

// frame title
string updateRepository = _("Update Repository");
// frame title
string automaticOnlineUpdate = _("Automatic Online Update");

// translators: "Set Default" meaning:  Set the Update Repository to the default one
string setDefaultButtonLabel = _("Set Default");
// translators: a short button label called "Advanced"
string advancedMenuButtonLabel = _("Advanced");

// for category filter
string filterByCategory = _("Filter by Category");
// for category filter //translators: means: categories of patches
string patchCategories = _("Patch Categories");

string help_title = sformat( "<p><b>%1</b></p>", moduleTitle);
string help_para1 = sformat(_("<p>In <b>%1</b> the current update repository is shown.</p>"), updateRepository );
string help_para2 = sformat(_("<p>Press <b>%1</b> to use the default update repository.</p>"), setDefaultButtonLabel );
string help_para3 = sformat(_("<p>Find related actions in the <b>%1</b> menu.</p>"), advancedMenuButtonLabel );
string help_para4 = sformat(_("<p>In <b>%1</b> set up the automatic online update. Choose the interval to use and if interactive patches should be ignored, otherwise the updater will use the default answers.</p>"), automaticOnlineUpdate   );


string editSoftwareRepositories = _("Edit Software Repositories");
string registerForSupport       = _("Register for support and get update repository");
string sendDataToSmolt          = _("Send hardware information to the smolt project");
string interval                 = _("Interval");
string skipInteractivePatches   = _("Skip Interactive Patches");
string autoAgreeWithLicenses    = _("Agree with Licenses");
string includeRecommends        = _("Include Recommended Packages");
string currentUpdateRepo        = _("Current Update Repository:");
string needToRegister           = _("In order to add the default update repository\nyou have to register this product.");
string runRegistrationNow       = _("Do you want to perform the registration now?");



string enabledMsg  = _("enabled");
string disabledMsg = _("disabled");


string getOUCHelp(symbol type)
{
    if (type == `autoyast)
    {
        return help_title + help_para1 + help_para2 + help_para3 + help_para4;
    }
    else
    {
        return help_title + help_para4;
    }
    return "";
}




term getOUCDialog(symbol type)
{

    list<term> expertMenu = [ `item(`id(`repoManager), editSoftwareRepositories ),
                              `item(`id(`register),    registerForSupport )
                        ];

    list<term> updateIntervals = maplist(symbol intid, string intname, OnlineUpdateConfiguration::Intervals, {
        return `item( `id(intid), intname);
    });

    term upRepo = `Frame(updateRepository,
                        `HBox(
                            `HStretch(),
                            `VBox(
                                `Left( `Label( currentUpdateRepo )),
                                `Left( `Label(`id(`currentRepoURL), "" )),
                                `HBox(
                                    `PushButton(`id(`restoreDefault), `opt(`disabled), setDefaultButtonLabel),
                                    `MenuButton( advancedMenuButtonLabel, expertMenu)
                                )
                            ),
                            `HStretch()
                        )
                    );

    list<string> sortedCatKeys = [];
    sortedCatKeys = maplist(string s, term t, OnlineUpdateConfiguration::defaultCategories, { return s; });
    sortedCatKeys = sort(string a, string b, toset(sortedCatKeys), ``(a > b));
    list<term> allCategories = maplist(string s, sortedCatKeys, { return OnlineUpdateConfiguration::defaultCategories[s]:`item(); });

    term autoOnlineUp = `HVSquash(
      `VBox(
        `CheckBoxFrame(`id(`automaticOnlineUpdate), automaticOnlineUpdate, false,
          `HBox(
            `HSpacing(2),
            `VBox(
              `Left ( `ComboBox(`id(`updateInterval), interval, updateIntervals )),
              `VSpacing(0.2),
              `Left( `CheckBox(`id(`skipInteractivePatches), skipInteractivePatches, OnlineUpdateConfiguration::skipInteractivePatches == true ? true:false ) ),
              `VSpacing(0.2),
              `Left( `CheckBox(`id(`autoAgreeWithLicenses),  autoAgreeWithLicenses,  OnlineUpdateConfiguration::autoAgreeWithLicenses  == true ? true:false ) ),
              `VSpacing(0.2),
              `Left( `CheckBox(`id(`includeRecommends),  includeRecommends,  OnlineUpdateConfiguration::includeRecommends == true ? true:false ) ),
              `VSpacing(0.8),
              `CheckBoxFrame( `id(`category), filterByCategory,  false,
                `HBox(
                  `HSpacing(2),
                  `VBox(
                    `SelectionBox( `id(`categories), patchCategories, [] ),
                    `HBox(
                      `MinWidth(15, `ComboBox( `id(`catcustom), `opt(`editable), "", allCategories ) ),
                      `PushButton( `id(`catadd), Label::AddButton() ),
                      `HSpacing(4),
                      `PushButton( `id(`catdel), Label::DeleteButton() )
                    )
                  )
                )
              ),
              `VSpacing(0.8)
            ),
            `HSpacing(2)
          )
        ),
       `Right( `MenuButton( advancedMenuButtonLabel, expertMenu) ),
       `VStretch()
      )
    );


    term contents = nil;

    if (type == `autoyast)
    {
        contents = `VBox(  `VSpacing(1.5),  autoOnlineUp,  `VStretch(), `VSpacing(1.5) );
    }
    else
    {
         contents = `HVSquash( `VBox(
                           `VSpacing(1.5),  upRepo,
                           `VSpacing(1.5),  autoOnlineUp, `VStretch(),  `VSpacing(1.5)
                    ));

        //contents = `VBox(  `VSpacing(1.5),  autoOnlineUp,  `VStretch(), `VSpacing(1.5) );
    }

    return contents;

}



}
